trigger:
- '*'

stages:
  - stage: 'Build'
    displayName: 'Build the web application'
    jobs: 
    - job: 'Build'
      displayName: 'Build job'
      pool:
        vmImage: 'ubuntu-18.04'

      # variables:
      #   wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      #   dotnetSdkVersion: '3.1.300'

      steps:
        - task: AzureResourceManagerTemplateDeployment@3
          displayName: 'Create .Net Core App'
          inputs:
            deploymentScope: 'Resource Group'
            azureResourceManagerConnection: 'test-connection'
            subscriptionId: 'b986656e-c238-4d08-bc76-efbfc9a46470'
            action: 'Create Or Update Resource Group'
            resourceGroupName: 'test'
            location: 'East US'
            templateLocation: 'Linked artifact'
            csmFile: 'test.json'
            # overrideParameters: '-secretName $(secretName) -secretValue $(secretValue)'
            deploymentMode: 'Incremental'

        # - task: UseDotNet@2
        #   displayName: 'Use .Net Core SDK $(dotnetSdkVersion)'
        #   inputs:
        #     packageType: sdk
        #     version: '$(dotnetSdkVersion)'

        # - task: DotNetCoreCLI@2
        #   displayName: 'Restore project dependencies'
        #   inputs:
        #     command: 'restore'
        #     projects: '**/*.csproj'

        # - task: DotNetCoreCLI@2
        #   displayName: 'Build the project - Release'
        #   inputs:
        #     command: 'build'
        #     arguments: '--no-restore --configuration Release'
        #     projects: '**/*.csproj'
      
        # - task: DotNetCoreCLI@2
        #   displayName: 'Publish the project - Release'
        #   inputs:
        #     command: 'publish'
        #     projects: '**/*.csproj'
        #     publishWebProjects: false
        #     arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
        #     zipAfterPublish: true   

        # - task: PublishBuildArtifacts@1
        #   displayName: 'Publish Artifact: drop'
        #   condition: succeeded()

        # - task: AzureCLI@2
        #   displayName: 'Azure CLI '
        #   inputs:
        #     azureSubscription: 'mossad-connection'
        #     scriptType: bash
        #     scriptLocation: inlineScript
        #     inlineScript: |
        #       az keyvault certificate create --vault-name tailspinkeyvaults -n cert1 \
        #         -p "$(az keyvault certificate get-default-policy)"

        - task: AzurePowerShell@5
          displayName: 'Azure PowerShell script: InlineScript'
          inputs:
            azureSubscription: 'test-connection'
            ScriptType: InlineScript
            Inline: |
              $Policy = New-AzKeyVaultCertificatePolicy -SecretContentType "application/x-pkcs12" -SubjectName "CN=ppl" -IssuerName "Self" -ValidityInMonths 6 -ReuseKeyOnRenewal
              Add-AzKeyVaultCertificate -VaultName "tailspinkeyvaults" -Name "ExampleCertificate" -CertificatePolicy $Policy
              Set-AzKeyVaultCertificatePolicy -VaultName "tailspinkeyvaults" -Name "cert1" -RenewAtNumberOfDaysBeforeExpiry 14
            azurePowerShellVersion: LatestVersion
                